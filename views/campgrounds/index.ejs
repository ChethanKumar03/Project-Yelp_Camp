<% layout("layouts/boilerplate") %>
<div id="map" class="mb-3" style="width: 100%; height: 500px"></div>
<h1>All Campgrounds</h1>
<% for( let camp of campgrounds) { %>
<div class="card mb-3">
  <div class="row">
    <div class="col-md-4">
      <img class="img-fluid" src="<%= camp.images[0].url %>" alt="" />
    </div>
    <div class="col-md-8">
      <div class="card-body">
        <h5 class="card-title"><%= camp.title %></h5>
        <p class="card-text"><%= camp.description %></p>
        <p class="card-text">
          <small class="text-muted"><%= camp.location %></small>
        </p>
        <a href="/campgrounds/<%= camp._id %>" class="btn btn-primary">View</a>
      </div>
    </div>
  </div>
</div>

<% } %>
<script>
  const camp= {features : <%- JSON.stringify(campgrounds) %>};
  // console.log(camp);
</script>
<script>
  mapboxgl.accessToken = "<%- process.env.MAPBOX_TOKEN %>";
  //mapboxgl.accessToken = 'your-access-token-here'; // Ensure you have your Mapbox access token

  const map = new mapboxgl.Map({
    container: "map",
    style: "mapbox://styles/mapbox/dark-v11",
    center: [-103.5917, 40.6699],
    zoom: 3,
  });
  map.addControl(new mapboxgl.NavigationControl());

  map.on("load", () => {
    // Assuming 'camp' is a valid GeoJSON object
    map.addSource("campgrounds", {
      type: "geojson",
      data: camp, // Ensure 'camp' is defined and valid GeoJSON
      cluster: true,
      clusterMaxZoom: 14,
      clusterRadius: 50,
    });
    map.addLayer({
      id: "clusters",
      type: "circle",
      source: "campgrounds",
      filter: ["has", "point_count"],
      paint: {
        "circle-color": [
          "step",
          ["get", "point_count"],
          "#51bbd6", // Blue color for small clusters
          10,
          "#f1f075", // Yellow for medium clusters
          30,
          "#f28cb1", // Pink for large clusters
        ],
        "circle-radius": ["step", ["get", "point_count"], 20, 10, 30, 30, 40],
      },
    });

    map.addLayer({
      id: "cluster-count",
      type: "symbol",
      source: "campgrounds",
      filter: ["has", "point_count"],
      layout: {
        "text-field": ["get", "point_count_abbreviated"],
        "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
        "text-size": 12,
      },
    });

    map.addLayer({
      id: "unclustered-point",
      type: "circle",
      source: "campgrounds",
      filter: ["!", ["has", "point_count"]],
      paint: {
        "circle-color": "#11b4da",
        "circle-radius": 4,
        "circle-stroke-width": 1,
        "circle-stroke-color": "#fff",
      },
    });

    // Cluster click to zoom in
    map.on("click", "clusters", (e) => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ["clusters"],
      });
      const clusterId = features[0].properties.cluster_id;
      map
        .getSource("campgrounds")
        .getClusterExpansionZoom(clusterId, (err, zoom) => {
          if (err) return;

          map.easeTo({
            center: features[0].geometry.coordinates,
            zoom: zoom,
          });
        });
    });

    // Popup for unclustered points
    map.on("click", "unclustered-point", (e) => {
      const { popUpMarkup } = e.features[0].properties;
      const coordinates = e.features[0].geometry.coordinates.slice();

      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }
      new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(popUpMarkup)
        .addTo(map);
    });

    map.on("mouseenter", "clusters", () => {
      map.getCanvas().style.cursor = "pointer";
    });
    map.on("mouseleave", "clusters", () => {
      map.getCanvas().style.cursor = "";
    });
  });

  // const map = new mapboxgl.Map({
  //   container: "map",
  //   // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
  //   style: "mapbox://styles/mapbox/dark-v11",
  //   center: [-103.5917, 40.6699],
  //   zoom: 3,
  // });

  // map.on("load", () => {
  //   // Add a new source from our GeoJSON data and
  //   // set the 'cluster' option to true. GL-JS will
  //   // add the point_count property to your source data.
  //   map.addSource("campgrounds", {
  //     type: "geojson",
  //     // Point to GeoJSON data. This example visualizes all M1.0+ campgrounds
  //     // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
  //     data: camp,
  //     cluster: true,
  //     clusterMaxZoom: 14, // Max zoom to cluster points on
  //     clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)
  //   });

  //   map.addLayer({
  //     id: "clusters",
  //     type: "circle",
  //     source: "campgrounds",
  //     filter: ["has", "point_count"],
  //     paint: {
  //       // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)
  //       // with three steps to implement three types of circles:
  //       //   * Blue, 20px circles when point count is less than 100
  //       //   * Yellow, 30px circles when point count is between 100 and 750
  //       //   * Pink, 40px circles when point count is greater than or equal to 750
  //       "circle-color": [
  //         "step",
  //         ["get", "point_count"],
  //         "#51bbd6",
  //         100,
  //         "#f1f075",
  //         750,
  //         "#f28cb1",
  //       ],
  //       "circle-radius": ["step", ["get", "point_count"], 20, 100, 30, 750, 40],
  //     },
  //   });

  //   map.addLayer({
  //     id: "cluster-count",
  //     type: "symbol",
  //     source: "campgrounds",
  //     filter: ["has", "point_count"],
  //     layout: {
  //       "text-field": ["get", "point_count_abbreviated"],
  //       "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
  //       "text-size": 12,
  //     },
  //   });

  //   map.addLayer({
  //     id: "unclustered-point",
  //     type: "circle",
  //     source: "campgrounds",
  //     filter: ["!", ["has", "point_count"]],
  //     paint: {
  //       "circle-color": "#11b4da",
  //       "circle-radius": 4,
  //       "circle-stroke-width": 1,
  //       "circle-stroke-color": "#fff",
  //     },
  //   });

  //   // inspect a cluster on click
  //   map.on("click", "clusters", (e) => {
  //     const features = map.queryRenderedFeatures(e.point, {
  //       layers: ["clusters"],
  //     });
  //     const clusterId = features[0].properties.cluster_id;
  //     map
  //       .getSource("campgrounds")
  //       .getClusterExpansionZoom(clusterId, (err, zoom) => {
  //         if (err) return;

  //         map.easeTo({
  //           center: features[0].geometry.coordinates,
  //           zoom: zoom,
  //         });
  //       });
  //   });

  //   // When a click event occurs on a feature in
  //   // the unclustered-point layer, open a popup at
  //   // the location of the feature, with
  //   // description HTML from its properties.
  //   map.on("click", "unclustered-point", (e) => {
  //     const coordinates = e.features[0].geometry.coordinates.slice();
  //     const mag = e.features[0].properties.mag;
  //     const tsunami = e.features[0].properties.tsunami === 1 ? "yes" : "no";

  //     // Ensure that if the map is zoomed out such that
  //     // multiple copies of the feature are visible, the
  //     // popup appears over the copy being pointed to.
  //     if (["mercator", "equirectangular"].includes(map.getProjection().name)) {
  //       while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
  //         coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
  //       }
  //     }

  //     new mapboxgl.Popup()
  //       .setLngLat(coordinates)
  //       .setHTML(`magnitude: ${mag}<br>Was there a tsunami?: ${tsunami}`)
  //       .addTo(map);
  //   });

  //   map.on("mouseenter", "clusters", () => {
  //     map.getCanvas().style.cursor = "pointer";
  //   });
  //   map.on("mouseleave", "clusters", () => {
  //     map.getCanvas().style.cursor = "";
  //   });
  // });
</script>
